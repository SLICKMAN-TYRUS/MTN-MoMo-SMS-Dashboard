MTN MoMo SMS Dashboard Project Report
Student Name: Ajak Bul Zachariah Chol
Course: Enterprise Web Development
Project Title: MTN MoMo SMS Dashboard
Submission Date: 12 June, 2025

1. Introduction
The MTN MoMo SMS Dashboard is an enterprise-level fullstack application I developed to parse, clean, store, and visualize SMS data from Rwanda's MTN Mobile Money (MoMo) service. This project involved converting approximately 1600 unstructured mobile money transaction messages, delivered in XML format, into meaningful financial insights.
The primary goal was to demonstrate end-to-end problem-solving—starting from backend data extraction and cleaning, through robust relational database design and API development, to building a dynamic, user-friendly frontend dashboard that highlights real-time trends. This solution showcases a professional-grade system that can scale and be extended for enterprise-level financial analytics.

2. Objectives and Learning Outcomes
This project enabled me to develop practical expertise in the following areas:
•	Data Extraction & Cleaning: Parsing raw SMS messages using Python’s XML libraries and categorizing them into predefined transaction types.
•	Database Design: Modeling and normalizing relational schemas in MySQL to ensure data integrity and optimal query performance.
•	Backend API Development: Creating RESTful endpoints in Flask for seamless frontend communication and data retrieval.
•	Frontend Engineering: Crafting a clean, responsive dashboard using HTML, CSS, and JavaScript with data visualizations via Chart.js.
•	System Integration: Orchestrating backend and frontend components into a cohesive system capable of filtering, displaying, and summarizing data interactively.

3. System Architecture Overview
Backend (Python + Flask)
•	parse_sms.py: Extracts structured transaction data from raw XML.
•	insert_into_mysql.py: Inserts the parsed JSON into a MySQL database.
•	app.py: Flask server exposing /transactions, /summary, and /transaction/<id> endpoints.
Database (MySQL)
•	Tables: transaction_types (categorical reference), transactions (actual records).
•	Features: Properly indexed, normalized schema with foreign key constraints.
•	Script: schema.sql handles automated DB creation and initialization.
Frontend (Vanilla HTML/CSS/JS)
•	Dashboard UI: Includes search, filters (type/date/amount), and interactive charts.
•	Visualizations: Bar, pie, and line charts rendered using Chart.js.
•	Details View: Clickable transaction rows reveal full data for inspection.
•	Interactivity: API-powered frontend renders live data via JavaScript fetch calls.

4. Implementation Phases
Phase 1: Parsing and Categorization
Using Python’s ElementTree, I parsed XML-formatted messages into JSON. Regex logic was applied to extract transaction IDs, amounts, types, and parties involved. Each message was labeled by category—e.g., "Incoming Money", "Airtime Purchase", or "Withdrawal"—and logged if unprocessable.
Phase 2: Database Design and Data Insertion
I structured the database to accommodate a wide range of transaction types while remaining normalized. The insertion script checked for duplicates, linked transactions to type IDs, and ensured all entries were consistent and complete.
Phase 3: Frontend Dashboard Development
The dashboard allows users to filter and explore financial data interactively. Visual consistency was ensured using modular CSS with flex/grid layouts. Transaction tables and filters were paired with real-time charts to offer a comprehensive analytical experience.
Phase 4: API Integration (Bonus)
A Flask API was developed to expose the database to the frontend. Endpoints dynamically serve filtered data and summary metrics to power charts and tables without refreshing the page.

5. Key Challenges and Resolutions
•	Malformed XML Input: Some SMS messages contained illegal XML characters (e.g., <, > in attribute values). I fixed this by sanitizing the data and manually escaping invalid tokens.
•	Regex Flexibility: Transaction formats varied significantly. Through testing and iterative refinement, I developed generalized but precise regex patterns to handle different message styles.
•	Frontend Cohesion Without Frameworks: Styling everything from scratch in pure CSS required careful planning, reusable design patterns, and strict separation of structure and presentation.

6. Conclusion
The MTN MoMo SMS Dashboard is more than a student project—it’s a functional analytics system that could be scaled or adapted for use by mobile money operators or fintech firms. It captures real transaction behavior, supports financial audits, and provides visual clarity into spending and income trends.
This assignment helped me synthesize everything I’ve learned about enterprise web development—from low-level parsing and database engineering to frontend UX and fullstack deployment. I'm confident in the scalability and professionalism of this solution.

7. Technology Stack
•	Python 3: Data parsing, backend logic, MySQL interaction
•	Flask: API development
•	MySQL: Relational database for structured transaction storage
•	HTML/CSS: User interface design
•	JavaScript (Vanilla): Frontend logic, filters, API fetch
•	Chart.js: Interactive data visualization

8. GitHub Repository
https://github.com/SLICKMAN-TYRUS/MTN-MoMo-SMS-Dashboard

9. Appendix
•	modified_sms_v2.xml: Source XML message data
•	cleaned_transactions.json: Structured output
•	schema.sql: SQL schema to generate DB
•	parse_sms.py: Parser script
•	insert_into_mysql.py: Data import script
•	app.py: Flask API server
•	Frontend folder: HTML, CSS, JS, charts
•	Backend folder: Python logic, database connectors

I hope this detailed report gives you a clear overview of how I started this project from the very beginning all the way to finish.

